name: "Lego-Conv-FG"

model:
  sample_rate: &sample_rate 16000
  log_prediction: true # enables logging sample predictions in the output during training
  ctc_reduction: 'mean_batch'

  train_ds:
    manifest_filepath: ???
    sample_rate: 16000
    batch_size: 32
    trim_silence: false
    max_duration: 16.7
    shuffle: true
    is_tarred: false
    tarred_audio_filepaths: null
    use_start_end_token: false
    pin_memory: true

  validation_ds:
    manifest_filepath: ???
    sample_rate: 16000
    batch_size: 32
    shuffle: false
    use_start_end_token: false
    pin_memory: true

  test_ds:
    manifest_filepath: null
    sample_rate: 16000
    batch_size: 32
    shuffle: false
    use_start_end_token: false
    pin_memory: true

  # recommend small vocab size of 128 or 256 with 4x sub-sampling
  tokenizer:
    dir: ???  # path to directory which contains either tokenizer.model (bpe) or vocab.txt (wpe)
    type: wpe  # Can be either bpe (sentencepiece tokenizer) or wpe (wordpiece tokenizer)

  preprocessor:
    _target_: nemo.collections.asr.modules.AudioToMelSpectrogramPreprocessor
    sample_rate: *sample_rate
    normalize: "per_feature"
    window_size: 0.025
    window_stride: 0.01
    window: "hann"
    features: &n_mels 80
    n_fft: 512
    frame_splicing: 1
    dither: 0.00001
    pad_to: 16
    stft_conv: false

  spec_augment:
    _target_: nemo.collections.asr.modules.SpectrogramAugmentation
    freq_masks: 6
    time_masks: 2
    freq_width: 27
    time_width: 0.05

  encoder:
    _target_: nemo.collections.asr.modules.LegoEncoder
    feat_in: ${model.preprocessor.features}
    n_blocks:
      - 6
      - 6
    d_model: 512
    outer_residual: true
    multi_block_residual: false
    conv_stride_every: 1
    conv_stride_total: 3
    multi_block_residual_skip: ${model.encoder.conv_stride_every}
    dropout: 0.

    sub_blocks:
      - - _target_: nemo.collections.asr.parts.submodules.lego_modules.LegoConvSubBlock
          d_model: ${model.encoder.d_model}
          kernel_size: 17

        - _target_: nemo.collections.asr.parts.submodules.lego_modules.LegoLinearSubBlock
          d_model: ${model.encoder.d_model}

      - - _target_: nemo.collections.asr.parts.submodules.lego_modules.LegoAttentionBlock
          d_model: ${model.encoder.d_model}
          patch_size: 128
          n_hidden: 128

        - _target_: nemo.collections.asr.parts.submodules.lego_modules.LegoLinearSubBlock
          d_model: ${model.encoder.d_model}


  decoder:
    _target_: nemo.collections.asr.modules.ConvASRDecoder
    feat_in: null
    num_classes: -1
    vocabulary: []

  optim:
    name: novograd
    lr: 0.05

    # optimizer arguments
    betas: [0.8, 0.25]
    weight_decay: 0.0001

    # scheduler setup
    sched:
      name: CosineAnnealing

      # scheduler config override
      warmup_steps: 10000
      warmup_ratio: null
      min_lr: 1e-5
      last_epoch: -1

trainer:
  gpus: 0 # number of gpus
  max_epochs: 100
  max_steps: null # computed at runtime if not set
  num_nodes: 1
  accelerator: ddp
  accumulate_grad_batches: 1
  checkpoint_callback: false  # Provided by exp_manager
  logger: false  # Provided by exp_manager
  log_every_n_steps: 100  # Interval of logging.
  val_check_interval: 1.0 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  check_val_every_n_epoch: 1
  precision: 32
  sync_batchnorm: false
  benchmark: false

exp_manager:
  exp_dir: null
  name: ${name}
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    # in case of multiple validation sets, first one is used
    monitor: "val_wer"
    mode: "min"
    save_top_k: 3

  # you need to set these two to True to continue the training
  resume_if_exists: false
  resume_ignore_no_checkpoint: false

  # You may use this section to create a W&B logger
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null
